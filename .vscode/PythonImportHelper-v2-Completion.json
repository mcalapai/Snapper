[
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "importPath": "pynput",
        "description": "pynput",
        "isExtraImport": true,
        "detail": "pynput",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Status",
        "importPath": "rich.status",
        "description": "rich.status",
        "isExtraImport": true,
        "detail": "rich.status",
        "documentation": {}
    },
    {
        "label": "ShortcutListener",
        "kind": 6,
        "importPath": "screen_capture",
        "description": "screen_capture",
        "peekOfCode": "class ShortcutListener:\n    def __init__(self, hotkey, console):\n        self.hotkey = hotkey\n        self.current_keys = set()\n        self.console = console\n        with keyboard.Listener(on_press=self.on_press, on_release=self.on_release) as listener:\n            listener.join()\n    def on_activate(self):\n        print(\"Keyboard shortcut activated!\")\n        image_stream = take_screenshot()",
        "detail": "screen_capture",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "kind": 2,
        "importPath": "screen_capture",
        "description": "screen_capture",
        "peekOfCode": "def take_screenshot():\n    # Create a temporary file\n    with tempfile.NamedTemporaryFile(delete=False, suffix=\".png\") as tmp_file:\n        tmp_filename = tmp_file.name\n    # Take a screenshot and save it to the temporary file\n    try:\n        subprocess.run([\"screencapture\", \"-i\", tmp_filename])\n    except Exception as e:\n        print(f\"Error occurred: {e}\")\n        exit(1)",
        "detail": "screen_capture",
        "documentation": {}
    },
    {
        "label": "encode_image_stream",
        "kind": 2,
        "importPath": "screen_capture",
        "description": "screen_capture",
        "peekOfCode": "def encode_image_stream(image_stream: io.BytesIO, image_format: str = \"PNG\"):\n    \"\"\"Encodes an image stream to base64 and determines the correct MIME type.\"\"\"\n    mime_type = f\"image/{image_format.lower()}\"\n    encoded_string = base64.b64encode(image_stream.getvalue()).decode('utf-8')\n    return f\"data:{mime_type};base64,{encoded_string}\"\ndef create_payload(image, prompt: str, model=\"gpt-4-vision-preview\", max_tokens=1000, detail=\"high\"):\n    \"\"\"Creates the payload for the API request.\"\"\"\n    messages = [\n        {\n            \"role\": \"user\",",
        "detail": "screen_capture",
        "documentation": {}
    },
    {
        "label": "create_payload",
        "kind": 2,
        "importPath": "screen_capture",
        "description": "screen_capture",
        "peekOfCode": "def create_payload(image, prompt: str, model=\"gpt-4-vision-preview\", max_tokens=1000, detail=\"high\"):\n    \"\"\"Creates the payload for the API request.\"\"\"\n    messages = [\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": prompt,\n                },",
        "detail": "screen_capture",
        "documentation": {}
    },
    {
        "label": "query_openai",
        "kind": 2,
        "importPath": "screen_capture",
        "description": "screen_capture",
        "peekOfCode": "def query_openai(payload, console):\n    \"\"\"Sends a request to the OpenAI API and prints the response.\"\"\"\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {api_key}\"\n    }\n    with console.status(\"[bold green]Making API request...\", spinner=\"dots\"):\n        response = requests.post(\"https://api.openai.com/v1/chat/completions\", headers=headers, json=payload)\n        return response.json()\nclass ShortcutListener:",
        "detail": "screen_capture",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "screen_capture",
        "description": "screen_capture",
        "peekOfCode": "api_key = os.getenv(\"OPENAI_API_KEY\")\ndef take_screenshot():\n    # Create a temporary file\n    with tempfile.NamedTemporaryFile(delete=False, suffix=\".png\") as tmp_file:\n        tmp_filename = tmp_file.name\n    # Take a screenshot and save it to the temporary file\n    try:\n        subprocess.run([\"screencapture\", \"-i\", tmp_filename])\n    except Exception as e:\n        print(f\"Error occurred: {e}\")",
        "detail": "screen_capture",
        "documentation": {}
    }
]